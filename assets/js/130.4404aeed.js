(window.webpackJsonp=window.webpackJsonp||[]).push([[130],{277:function(t,n,e){"use strict";e.r(n);var r=e(28),a=Object(r.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"后期处理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#后期处理"}},[t._v("#")]),t._v(" 后期处理")]),t._v(" "),e("p",[t._v("在本指南中，我们将学习如何在nunuStudio中使用后处理效果，后处理效果是在渲染基本图像后应用的。这些效果可用于为场景提供完全不同的气氛。")]),t._v(" "),e("p",[t._v("后处理管道由用于生成最终图像的一系列步骤组成，每个步骤均按顺序执行（更改其顺序会产生不同的结果）。管道已附加到相机对象。")]),t._v(" "),e("p",[t._v("要打开后处理管道编辑器，请双击资源管理器中的照相机对象。")]),t._v(" "),e("p",[t._v("每个后处理步骤都有其自己的自定义属性集，可以在编辑器中和运行时对其进行调整。可以启用/禁用后处理步骤，并将其用作最终图像的输出。")]),t._v(" "),e("p",[e("img",{attrs:{src:"/nunustudio/postprocessing/editor.png",alt:"alt text"}})]),t._v(" "),e("p",[t._v("要在编辑器中尝试此示例，可以下载项目文件或在Web编辑器上将其打开。")]),t._v(" "),e("p",[e("img",{attrs:{src:"/nunustudio/postprocessing/run.png",alt:"alt text"}})]),t._v(" "),e("h2",{attrs:{id:"自定义效果"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自定义效果"}},[t._v("#")]),t._v(" 自定义效果")]),t._v(" "),e("p",[t._v("可以使用GLSL着色器创建自定义的后期处理效果。这可以通过使用脚本对象来实现，该脚本对象创建自定义着色器通道并将其附加到相机对象，如下所示。")]),t._v(" "),e("p",[t._v("程序员必须谨慎，并管理传递给着色器的统一值。如果需要播放效果，请不要忘记将renderToScreen变量设置为true。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('include("SepiaShader.js");\n\nfunction initialize()\n{\n\tcamera = scene.getObjectByName("camera");\n\n\t//custom shader pass\n\tvar effect =\n\t{\n\tuniforms:\n\t\t{\n\t\t\t"tDiffuse": { value: null },\n\t\t\t"amount":   { value: 1.0 }\n\t\t},\n\t\tvertexShader: [\n\t\t\t"varying vec2 vUv;",\n\t\t\t"void main() {",\n\t\t\t\t"vUv = uv;",\n\t\t\t\t"gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);",\n\t\t\t"}"\n\t\t].join("\\n"),\n\t\tfragmentShader: [\n\t\t\t"uniform float amount;",\n\t\t\t"uniform sampler2D tDiffuse;",\n\t\t\t"varying vec2 vUv;",\n\t\t\t"void main() {",\n\t\t\t\t"vec4 color = texture2D(tDiffuse, vUv);",\n\t\t\t\t"vec3 c = color.rgb;",\n\t\t\t\t"color.r = c.r * 2.0;",\n\t\t\t\t"color.g = c.g / 1.2;",\n\t\t\t\t"color.b = c.b;",\n\t\t\t\t"gl_FragColor = vec4(color.rgb , color.a);",\n\t\t\t"}"\n\t\t].join("\\n")\n\t}\n\n\tcamera.composer.passes[0].renderToScreen = false;\n\n\tvar sepia = new ShaderPass(THREE.SepiaShader);\n\tcamera.composer.addPass(sepia);\n\tsepia.renderToScreen = true;\n}\n\n')])])])])}),[],!1,null,null,null);n.default=a.exports}}]);