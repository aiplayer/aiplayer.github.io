(window.webpackJsonp=window.webpackJsonp||[]).push([[126],{281:function(t,n,e){"use strict";e.r(n);var a=e(28),o=Object(a.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"多人射击游戏"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多人射击游戏"}},[t._v("#")]),t._v(" 多人射击游戏")]),t._v(" "),e("p",[t._v("在本教程中，我们将使用WebSockets进行网络体验，并将创建一个简单的网络多人游戏。对于本教程，将使用node.js来开发服务器应用程序。我决定使用node.js只是因为它使用了nunuStudio中使用的相同语言（javascript），但是您可以选择其他框架/语言来实现服务器。")]),t._v(" "),e("p",[t._v("让我们先介绍一下WebSockets的基础知识，它们的基本概念以及如何使用它们来创建基于Web的多人游戏，websockets是一项技术，它使使用它们打开用户浏览器和服务器之间的交互式通信会话成为可能。可以将消息发送到服务器并接收事件驱动的响应，而不必轮询服务器以获取答复。")]),t._v(" "),e("p",[t._v("单个websocket服务器可用于互连多个客户端，该服务器充当数据交换的中介，以消息聊天为例，每个客户端连接到服务器，并在发送消息时告诉服务器他是谁。客户端告诉服务器消息的目的地，然后服务器将该消息重定向到其目的地，也就是连接到服务器的客户端。")]),t._v(" "),e("p",[e("img",{attrs:{src:"/nunustudio/video/chat.png",alt:"alt text"}})]),t._v(" "),e("p",[t._v("让我们从安装本教程所需的nodejs依赖关系开始，我们只需要websocket依赖关系使用下面的命令就可以使用您的计算机终端/命令来安装它。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("npm -g install websocket\n")])])]),e("p",[t._v("要设置服务器代码，我们将首先导入所需的节点模块，然后创建一个http服务器实例并使用正确的端口（可以使用我们想要的任何端口）进行配置，然后创建一个WebSocketServer允许我们向连接到服务器的客户端发送和接收消息。在本教程中，为方便起见，我们将仅使用JSON消息，但我们可以发送任何类型的数据。")]),t._v(" "),e("p",[t._v("下面的代码将用作我们服务器的基础，它将处理与客户端建立连接所需的所有步骤，从现在开始，我们将仅专注于消息交换。对于本教程，我们将使用端口1111和本地主机进行通信，请确保将其更改为正确的IP，并在使用外部服务器时配置端口访问。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('var WebSocketServer = require("websocket").server;\nvar http = require("http");\n\nvar port = 1111;\n\nvar server = http.createServer();\nserver.listen(port);\n\nconsole.log("Server running at port " + port);\n\nvar wsServer = new WebSocketServer({httpServer: server});\nwsServer.on("request", function(request)\n{\n\tvar connection = request.accept(null, request.origin);\n\n\tconnection.on("message", function(message)\n\t{\n\t\t//Message handling code here\n\t});\n\t\n\tconnection.on("close", function(connection)\n\t{\n\t\t//User disconnected code here\n\t});\n});\n')])])]),e("p",[t._v("下面的代码是我们将在nunuStudio中编写的客户端部分，因为我们可以看到连接到WebSocket的代码非常简单，实际上类似于用于创建服务器本身的代码，在nunuStudio中启动客户端部分时，您应该能够在控制台中看到“已连接到服务器”消息。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('var connection, connected = false;\n\nfunction initialize()\n{\t\n\tconnection = new WebSocket("ws://127.0.0.1:1337");\n\t\n\tconnection.onopen = function()\n\t{\n\t\tconnected = true;\n\t\tconsole.log("Connected to server");\n\t};\n}\n')])])]),e("p",[t._v("现在让我们向服务器发送一条简单的消息并为我们发送的消息创建响应，我们将在每条发送的消息中包含一个类型值（允许服务器区分消息）和一个uuid（允许服务器区分客户端）。要发送消息，我们将使用WebSocket send方法，所有消息都将进行JSON编码，因此我们必须在客户端上调用JSON.stringify将对象转换为文本格式，然后调用JSON.parse在服务器上重新创建对象。")]),t._v(" "),e("p",[t._v("下面的代码是客户端。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('uuid = THREE.Math.generateUUID();\n...\nconnection.onopen = function()\n{\n\tconsole.log("Connected to server");\n\tconnection.send(JSON.stringify(\n\t{\n\t\ttype:"connected",\n\t\tuuid:uuid\n\t}));\n};\n')])])]),e("p",[t._v("下面的代码是服务器端。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('connection.on("message", function(message)\n{\n\tconsole.log("Message received");\n\tvar data = JSON.parse(message.utf8Data);\n});\n')])])]),e("p",[t._v("如果一切正常，我们现在应该能够在客户端和服务器之间交换消息，我们可以使用nunuStudio提供的序列化方法在多个客户端之间发送和更新场景中对象的状态。")]),t._v(" "),e("p",[t._v("现在让我们开始创建关卡，让我们从最好在定义位置开始的几对墙开始，在我的情况下，我已将墙精确地放置在X轴上的位置20和Z轴上的位置12，知道壁位置将对以后有所帮助用于手动碰撞检查。")]),t._v(" "),e("p",[e("img",{attrs:{src:"/nunustudio/video/level.jpg",alt:"alt text"}})]),t._v(" "),e("p",[t._v("创建关卡后，让我们现在创建播放器，我仅使用一个多维数据集开始，并对播放器的运动进行了编程，当按下鼠标按钮时，播放器将使用WASD键移动并始终沿鼠标方向旋转。玩家将发射子弹。")]),t._v(" "),e("p",[t._v("为了使玩家始终查看鼠标的位置，我们需要获取鼠标指向的世界坐标，为此，我们可以使用场景中可用的射线投射器对象，并使用它来检查鼠标与地面对象的交集。")]),t._v(" "),e("p",[t._v("下面的代码实现了所有播放器的初始化和移动。播放器状态更新后，“更新”消息将发送到服务器，当服务器收到此消息时，它将重新分配给所有其他客户端，以便它们可以更新远程播放器实例状态。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('function initialize()\n{\t\t\n\t//Player\n\tplayer = scene.getObjectByName("player");\n\tplayer.material.color.setHex(Math.random() * 0xFFFFFF);\n\tplayer.uuid = THREE.Math.generateUUID();\n\tplayer.canFire = true;\n\tplayer.alive = true;\n\t\n\t//Ground\n\tground = scene.getObjectByName("ground");\n\n\t//Clock\n\tclock = new Clock();\n\tclock.start();\n\n\t...\n}\n\nfunction update()\n{\n\tvar delta = clock.getDelta();\n\n\tif(connected)\n\t{\n\t\tif(player.alive)\n\t\t{\n\t\t\t//Move player\n\t\t\tvar speed = delta * 10;\n\t\t\tif(Keyboard.keyPressed(Keyboard.W)) player.position.z -= speed;\n\t\t\tif(Keyboard.keyPressed(Keyboard.S)) player.position.z += speed;\n\t\t\tif(Keyboard.keyPressed(Keyboard.A)) player.position.x -= speed;\n\t\t\tif(Keyboard.keyPressed(Keyboard.D)) player.position.x += speed;\n\n\t\t\t//Limit player movement\n\t\t\tif(player.position.x > 19) player.position.x = 19;\n\t\t\tif(player.position.x < -19) player.position.x = -19;\n\t\t\tif(player.position.z > 11) player.position.z = 11;\n\t\t\tif(player.position.z < -11) player.position.z = -11;\t\t\t\n\n\t\t\t//Mouse rotation\n\t\t\tvar intersect = scene.raycaster.intersectObject(ground);\n\t\t\tif(intersect.length > 0)\n\t\t\t{\n\t\t\t\tvar point = intersect[0].point;\n\t\t\t\tpoint.y = player.position.y;\n\t\t\t\tplayer.lookAt(point);\n\n\t\t\t\t//Fire bullet\n\t\t\t\tif(player.canFire && Mouse.buttonJustPressed(Mouse.LEFT))\n\t\t\t\t{\n\t\t\t\t\t//TODO Create bullet\n\n\t\t\t\t\tplayer.canFire = false;\n\t\t\t\t\tsetTimeout(function()\n\t\t\t\t\t{\n\t\t\t\t\t\tplayer.canFire = true;\n\t\t\t\t\t}, 500);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n')])])]),e("p",[t._v("如果您愿意，可以自定义播放器以使其外观更好一些，我给我添加了两只眼睛，并用一根棍子将其作为武器。")]),t._v(" "),e("p",[e("img",{attrs:{src:"/nunustudio/video/player.jpg",alt:"alt text"}})]),t._v(" "),e("p",[t._v("现在，让我们同步多个客户端之间的位置，让我们创建一个简单的数据结构以将Players存储在我们的服务器和客户端中。下面的代码实现了服务器中所需的基本数据结构，服务器会将播放器和连接存储在列表中，并将播放器状态重新分配给服务器中的所有其他播放器。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var players = [], clients = [];\n\nfunction Player(uuid, color)\n{\n\tthis.uuid = uuid;\n\tthis.color = color;\n\tthis.position = null;\n\tthis.rotation = null;\n}\n\nfunction Client(uuid, connection)\n{\n\tthis.uuid = uuid;\n\tthis.connection = connection;\n}\n")])])]),e("p",[t._v("当播放器连接到服务器时，它需要发送“连接”消息，其中包含有关播放器的初始数据，例如其UUID和用于表示世界的颜色。服务器收到此消息后，会将播放器添加到播放器和连接数组。当玩家更新其状态时，将发送“更新”消息，该消息包含玩家的实际位置和旋转，并且当其断开连接或死去时，将发送“断开连接”消息。")]),t._v(" "),e("p",[t._v("当客户端从服务器接收到“更新”消息（服务器仅重新分发这些消息）时，客户端需要检查是否知道播放器，如果是这样的话，其位置和旋转将被更新，否则将使用消息中指示的颜色和uuid，当收到“断开连接”消息时，指示的播放器被销毁。")]),t._v(" "),e("p",[t._v("下面的代码是客户端部分，其中包含从游戏中添加，更新和删除玩家所需的所有代码。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('var players = [];\n\nfunction initialize()\n{\t\n\t...\n\n\twebsocket.onopen = function()\n\t{\n\t\twebsocket.send(JSON.stringify(\n\t\t{\n\t\t\ttype: "connected",\n\t\t\tuuid: player.uuid,\n\t\t\tcolor: player.material.color.getHex()\n\t\t}));\n\t\t...\n\t};\n\t\n\twebsocket.onmessage = function(message)\n\t{\n\t\tvar data = JSON.parse(message.data);\n\t\t\n\t\tif(data.type === "update")\n\t\t{\t\n\t\t\tvar uuid = data.uuid;\n\n\t\t\tif(data.uuid !== player.uuid)\n\t\t\t{\n\t\t\t\tvar object = players[data.uuid];\n\n\t\t\t\tif(object === undefined)\n\t\t\t\t{\n\t\t\t\t\tvar material = new MeshPhongMaterial({color: data.color});\n\t\t\t\t\tvar object = player.clone();\n\t\t\t\t\tobject.material = material;\n\t\t\t\t\tobject.uuid = data.uuid;\n\t\t\t\t\tobject.color = data.color;\n\t\t\t\t\tscene.add(object);\n\t\t\t\t\tplayers[uuid] = object;\n\t\t\t\t}\n\n\t\t\t\tobject.position.fromArray(data.position);\n\t\t\t\tobject.rotation.fromArray(data.rotation);\n\t\t\t}\n\t\t}\n\t\telse if(data.type === "disconnect")\n\t\t{\n\t\t\tif(players[data.uuid] !== undefined)\n\t\t\t{\n\t\t\t\tplayers[data.uuid].destroy();\n\t\t\t\tdelete players[data.uuid];\n\t\t\t}\n\t\t}\n\t};\n}\n\nfunction update()\n{\n\t...\n\n\tif(connected)\n\t{\n\t\t...\n\n\t\t//Update message\n\t\twebsocket.send(JSON.stringify(\n\t\t{\n\t\t\ttype: "update",\n\t\t\tuuid: player.uuid,\n\t\t\tposition: player.position.toArray(),\n\t\t\trotation: player.rotation.toArray()\n\t\t}));\n\t}\n}\n')])])]),e("p",[t._v("下面的代码是服务器部分，对于服务器，维护两个阵列，一个与连接，一个与播放器。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('server.on("request", function(request)\n{\n\tvar connection = request.accept(null, request.origin);\n\n\t//Message\n\tconnection.on("message", function(message)\n\t{\n\t\tvar data = JSON.parse(message.utf8Data);\n\t\t\n\t\t//Connected\n\t\tif(data.type === "connected")\n\t\t{\n\t\t\tplayers.push(new Player(data.uuid, data.color));\n\t\t\tclients.push(new Client(data.uuid, connection));\n\n\t\t\tconsole.log("Player " + data.uuid + " connected");\n\t\t}\n\t\t//Update\n\t\telse if(data.type === "update")\n\t\t{\n\t\t\tvar player = getPlayer(data.uuid);\n\n\t\t\tif(player !== null)\n\t\t\t{\n\t\t\t\tplayer.position = data.position;\n\t\t\t\tplayer.rotation = data.rotation;\n\t\t\t}\n\n\t\t\tfor(var i = 0; i < clients.length; i++)\n\t\t\t{\n\t\t\t\tclients[i].connection.sendUTF(message.utf8Data);\n\t\t\t}\t\t\t\t\n\t\t}\n\t\t//Disconnected\n\t\telse if(data.type === "disconnect")\n\t\t{\n\t\t\tremovePlayer(data.uuid);\n\n\t\t\tfor(var i = 0; i < clients.length; i++)\n\t\t\t{\n\t\t\t\tclients[i].connection.sendUTF(message.utf8Data);\n\t\t\t}\n\n\t\t\tconsole.log("Player " + data.uuid + " disconnected");\n\t\t}\n\t});\n}\n')])])]),e("p",[t._v("如果一切正常，您应该能够将多个客户端连接到服务器并看到它们四处移动，要测试多个客户端，您可以导出项目的Web版本并在所选的浏览器中打开。")]),t._v(" "),e("p",[e("img",{attrs:{src:"/nunustudio/video/connected.png",alt:"alt text"}})]),t._v(" "),e("p",[t._v("我们快完成了，只需要添加项目符号，我们就可以为项目符号做准备了，我们将做一些类似于玩家动作的操作，但是不是让发送它的客户更新项目符号位置，而是每个客户都会更新项目符号位置，并且在本地检查冲突，这应允许减少通过服务器传输的数据量。")]),t._v(" "),e("p",[t._v("下面的代码实现了项目符号的创建和更新，所有项目符号存储在一个数组中并每帧更新一次，当玩家射击项目符号时，“项目符号”消息发送到服务器并重新分配给所有客户端。如果子弹击中了玩家，则玩家死亡，并且“断开连接”消息发送到服务器。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('function update()\n{\n\t...\n\n\t{\n\t\t...\n\t\t{\n\t\t\t...\n\t\t\t//Mouse rotation\n\t\t\tvar intersect = scene.raycaster.intersectObject(ground);\n\t\t\tif(intersect.length > 0)\n\t\t\t{\n\t\t\t\tvar point = intersect[0].point;\n\t\t\t\tpoint.y = player.position.y;\n\t\t\t\tplayer.lookAt(point);\n\n\t\t\t\t//Fire bullet\n\t\t\t\tif(player.canFire && Mouse.buttonJustPressed(Mouse.LEFT))\n\t\t\t\t{\n\t\t\t\t\tvar bullet = new Mesh(bulletGeometry, bulletMaterial);\n\t\t\t\t\tbullet.owner = player.uuid;\n\t\t\t\t\tbullet.velocity = point;\n\t\t\t\t\tbullet.velocity.sub(player.position);\n\t\t\t\t\tbullet.velocity.normalize();\n\t\t\t\t\tbullet.velocity.multiplyScalar(20);\n\t\t\t\t\tbullet.position.copy(player.position);\n\t\t\t\t\tbullets.push(bullet);\n\t\t\t\t\tscene.add(bullet);\n\n\t\t\t\t\tplayer.canFire = false;\n\t\t\t\t\tsetTimeout(function()\n\t\t\t\t\t{\n\t\t\t\t\t\tplayer.canFire = true;\n\t\t\t\t\t}, 500);\n\t\t\t\t\t\n\t\t\t\t\twebsocket.send(JSON.stringify(\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: "bullet",\n\t\t\t\t\t\tuuid: player.uuid,\n\t\t\t\t\t\tposition: bullet.position.toArray(),\n\t\t\t\t\t\tvelocity: bullet.velocity.toArray()\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t//Update bullets\n\t\tfor(var i = 0; i < bullets.length; i++)\n\t\t{\n\t\t\tvar bullet = bullets[i];\n\n\t\t\tbullet.position.x += bullet.velocity.x * delta;\n\t\t\tbullet.position.y += bullet.velocity.y * delta;\n\t\t\tbullet.position.z += bullet.velocity.z * delta;\n\n\t\t\t//Check bullet out of arena\n\t\t\tif(bullet.position.x > 20 || bullet.position.x < -20 || bullet.position.z > 12 || bullet.position.z < -12)\n\t\t\t{\n\t\t\t\tbullet.destroy();\n\t\t\t\tbullets.splice(i, 1);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t//Check collision with players\n\t\t\tif(bullet.owner !== player.uuid && bullet.position.distanceTo(player.position) < 0.8)\n\t\t\t{\n\t\t\t\tbullet.destroy();\n\t\t\t\tbullets.splice(i, 1);\n\t\t\t\t\n\t\t\t\tplayer.destroy();\n\t\t\t\tplayer.alive = false;\n\n\t\t\t\twebsocket.send(JSON.stringify(\n\t\t\t\t{\n\t\t\t\t\ttype: "disconnect",\n\t\t\t\t\tuuid: player.uuid\n\t\t\t\t}));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t...\n\t}\t\n}\n')])])]),e("p",[t._v("在服务器端，“项目符号”消息仅分发给所有连接的客户端。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('connection.on("message", function(message)\n{\n\t...\n\telse if(data.type === "bullet")\n\t{\n\t\tfor(var i = 0; i < clients.length; i++)\n\t\t{\n\t\t\tclients[i].connection.sendUTF(message.utf8Data);\n\t\t}\n\n\t\tconsole.log("Player " + data.uuid + " fired bullet!");\n\t}\n\t...\n}\n')])])]),e("p",[t._v("现在，游戏已经准备好了，我们只需要添加一些代码，以确保当用户关闭窗口时客户端发送断开连接的消息，这可以通过向脚本添加dispose函数来轻松完成。当应用程序终止时，将自动调用处理消息。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('function dispose()\n{\n\twebsocket.send(JSON.stringify(\n\t{\n\t\ttype: "disconnect",\n\t\tuuid: player.uuid\n\t}));\n\t\n\twebsocket.close();\n}\n')])])]),e("p",[t._v("如果可以按照所有步骤进行操作，则本教程中说明的使用websockets进行消息交换的机制可以轻松地适用于其他类型的应用程序，并且可以在nunuStudio之外使用。")]),t._v(" "),e("p",[t._v("希望本教程对您有所帮助，您可以在此处下载项目文件。如有任何问题，请随时给我发送电子邮件或在GitHub中打开问题。")]),t._v(" "),e("p",[e("img",{attrs:{src:"/nunustudio/video/game.jpg",alt:"alt text"}})])])}),[],!1,null,null,null);n.default=o.exports}}]);