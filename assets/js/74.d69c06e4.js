(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{389:function(t,a,e){"use strict";e.r(a);var s=e(28),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"构建360图片画廊"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#构建360图片画廊"}},[t._v("#")]),t._v(" 构建360图片画廊")]),t._v(" "),e("p",[t._v("让我们建立一个互动凝视360°图像库。用户可以点击三个面板。单击后，背景将淡入并交换360°图像。")]),t._v(" "),e("p",[t._v("本指南将实践与实体组件相关的三个概念：")]),t._v(" "),e("p",[t._v("使用A形框架附带的标准组件。")]),t._v(" "),e("p",[t._v("使用生态系统中的社区组件。")]),t._v(" "),e("p",[t._v("编写自定义组件以实现我们想要的任何功能。")]),t._v(" "),e("p",[t._v("并不是说360°图像是a-Frame的一个焦点用例，但它是一个简单的例子，作为Web上的早期用例有很多需求。")]),t._v(" "),e("h2",{attrs:{id:"骨架"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#骨架"}},[t._v("#")]),t._v(" 骨架")]),t._v(" "),e("p",[t._v("这是我们场景的起点。我们也可以重新混音故障。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<a-scene>\n  <a-assets>\n    <audio id="click-sound" src="https://cdn.aframe.io/360-image-gallery-boilerplate/audio/click.ogg"></audio>\n\n    \x3c!-- Images. --\x3e\n    <img id="city" src="https://cdn.aframe.io/360-image-gallery-boilerplate/img/city.jpg">\n    <img id="city-thumb" src="https://cdn.aframe.io/360-image-gallery-boilerplate/img/thumb-city.jpg">\n    <img id="cubes" src="https://cdn.aframe.io/360-image-gallery-boilerplate/img/cubes.jpg">\n    <img id="cubes-thumb" src="https://cdn.aframe.io/360-image-gallery-boilerplate/img/thumb-cubes.jpg">\n    <img id="sechelt" src="https://cdn.aframe.io/360-image-gallery-boilerplate/img/sechelt.jpg">\n    <img id="sechelt-thumb" src="https://cdn.aframe.io/360-image-gallery-boilerplate/img/thumb-sechelt.jpg">\n  </a-assets>\n\n  \x3c!-- 360-degree image. --\x3e\n  <a-sky id="image-360" radius="10" src="#city"></a-sky>\n\n  \x3c!-- Link template we will build. --\x3e\n  <a-entity class="link"></a-entity>\n\n  \x3c!-- Camera + Cursor. --\x3e\n  <a-camera>\n    <a-cursor\n      id="cursor"\n      animation__click="property: scale; from: 0.1 0.1 0.1; to: 1 1 1; easing: easeInCubic; dur: 150; startEvents: click"\n      animation__clickreset="property: scale; to: 0.1 0.1 0.1; dur: 1; startEvents: animationcomplete__click"\n      animation__fusing="property: scale; from: 1 1 1; to: 0.1 0.1 0.1; easing: easeInCubic; dur: 150; startEvents: fusing"></a-cursor>\n  </a-camera>\n</a-scene>\n')])])]),e("p",[t._v("我们已经预先定义了：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("要在"),e("a-assets",[t._v("中的资产管理系统中预加载的几个图像。注意，并非所有资产都必须预先定义或预加载。")])],1)]),t._v(" "),e("li",[e("p",[t._v("我们的360°图像占位符带有"),e("a-sky",[t._v("。")])],1)]),t._v(" "),e("li",[e("p",[t._v("一种带有视觉反馈的光标，使用事件驱动的动画，固定在摄像机上。")])])]),t._v(" "),e("h2",{attrs:{id:"使用标准组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用标准组件"}},[t._v("#")]),t._v(" 使用标准组件")]),t._v(" "),e("p",[t._v("标准组件是与任何标准库一样随A形框架一起提供的组件。我们将讨论如何将这些组件附加到实体并从HTML配置它们。")]),t._v(" "),e("p",[t._v("我们想建立一个纹理平面作为一个链接，当点击，将改变360°图像。我们从一个空实体开始。如果没有任何组件，任何空实体都不会执行任何操作，也不会呈现任何内容：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<a-entity class="link"></a-entity>\n')])])]),e("p",[t._v("为了得到我们的实体形状，我们可以附加几何组件，配置为平面形状。我们使用类似于内联CSS样式的语法指定组件数据：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<a-entity\n  class="link"\n  geometry="primitive: plane; height: 1; width: 1">\n</a-entity>\n')])])]),e("p",[t._v("然后给我们的实体外观，我们可以附加材料组件。我们将shader设置为flat，这样图像不会受到灯光的负面影响。我们将src设置为cubes thumb，将选择器设置为资产管理系统中预加载的一个图像。或者，我们可以传递图像的URL：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<a-entity class="link"\n  geometry="primitive: plane; height: 1; width: 1"\n  material="shader: flat; src: #cubes-thumb">\n</a-entity>\n')])])]),e("p",[t._v("通过插入更多组件，我们可以继续向实体添加功能。我们再附加一个标准组件，声音组件。我们希望这样做，当我们点击（通过凝视）链接时，它会播放点击声音。语法和以前一样，但是我们现在使用的是声音组件的属性。我们设置为“单击”，以便按“单击”播放声音。我们将src设置为click sound，将选择器设置为"),e("audio",[t._v("元素。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<a-entity class="link"\n  geometry="primitive: plane; height: 1; width: 1"\n  material="shader: flat; src: #cubes-thumb"\n  sound="on: click; src: #click-sound">\n</a-entity>\n')])])]),e("p",[t._v("现在我们有一个纹理平面，当点击时播放点击声音。")]),t._v(" "),e("h2",{attrs:{id:"使用社区组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用社区组件"}},[t._v("#")]),t._v(" 使用社区组件")]),t._v(" "),e("p",[t._v("A-Frame有一个很小的标准组件核心，但是很多魔力来自A-Frame生态系统中大量的开源社区组件。我们可以从npm等地方找到社区组件。我们可以把它们放到场景中，直接在HTML中使用。组件可以做任何事情，并将数百行代码抽象到一个可以通过HTML属性插入的组件中，比如物理！")]),t._v(" "),e("p",[t._v("我们将使用四个社区组件：")]),t._v(" "),e("ul",[e("li",[t._v("event-set")]),t._v(" "),e("li",[t._v("layout")]),t._v(" "),e("li",[t._v("proxy-event")]),t._v(" "),e("li",[t._v("template")])]),t._v(" "),e("p",[t._v("社区组件通常可以通过GitHub获得，并发布在npm上。包含组件的一个简单方法是使用unpkg.com CDN，它允许我们将托管在npm上的组件作为脚本标记包括在内，甚至支持指定模糊版本。我们通常只需要知道组件的npm包名称和路径：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<html>\n  <head>\n    <title>360° Image Browser</title>\n    <script src="https://aframe.io/releases/1.0.4/aframe.min.js"><\/script>\n    <script src="https://unpkg.com/aframe-template-component@3.x.x/dist/aframe-template-component.min.js"><\/script>\n    <script src="https://unpkg.com/aframe-layout-component@4.x.x/dist/aframe-layout-component.min.js"><\/script>\n    <script src="https://unpkg.com/aframe-event-set-component@5.x.x/dist/aframe-event-set-component.min.js"><\/script>\n  </head>\n  <body>\n    <a-scene>\n      \x3c!-- ... --\x3e\n    </a-scene>\n  </body>\n</html>\n')])])]),e("h3",{attrs:{id:"创建链接的模板组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建链接的模板组件"}},[t._v("#")]),t._v(" 创建链接的模板组件")]),t._v(" "),e("p",[t._v("目前，我们只有一个链接。我们要创建三个，每个360°图像一个。我们希望能够对所有的HTML定义进行重用。")]),t._v(" "),e("p",[t._v("一种解决方案是模板组件，它在运行时将模板引擎集成到A-Frame中。这让我们可以做一些事情，比如封装实体组、传递数据以生成实体或迭代。因为我们想把一个链接变成三个，而不需要复制和粘贴HTML，所以我们可以使用模板组件。")]),t._v(" "),e("p",[t._v("理想情况下，我们应该在构建时（例如，使用Super Nunjucks Webpack Loader）这样做，而不是在运行时浪费时间。但是为了使本教程演示组件更加简单，我们将使用模板组件。实际上，我们希望使用Webpack这样的模块捆绑器。")]),t._v(" "),e("p",[t._v("如果我们阅读模板组件的文档，我们会发现定义模板的一种方法是通过"),e("a-assets",[t._v("中的脚本标记。让我们将链接设为模板，并使用id为其命名：")])],1),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<a-assets>\n  \x3c!-- ... --\x3e\n  <script id="plane" type="text/html">\n    <a-entity class="link"\n      geometry="primitive: plane; height: 1; width: 1"\n      material="shader: flat; src: #cubes-thumb"\n      sound="on: click; src: #click-sound"></a-entity>\n  <\/script>\n</a-assets>\n')])])]),e("p",[t._v("然后，我们可以使用模板创建多个平面，而无需大量工作：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<a-entity template="src: #plane"></a-entity>\n<a-entity template="src: #plane"></a-entity>\n<a-entity template="src: #plane"></a-entity>\n')])])]),e("p",[t._v("但之后它们都会显示相同的图像纹理和外观。这里我们需要一个带有变量替换的模板引擎。模板组件带有简单的ES6字符串插值（即${var}格式）。")]),t._v(" "),e("p",[t._v("为了允许自定义模板的每个实例，我们在模板中定义了一个${thumb}变量，可以使用数据属性传递该变量：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<a-assets>\n  \x3c!-- ... --\x3e\n  <script id="plane" type="text/html">\n    <a-entity class="link"\n      geometry="primitive: plane; height: 1; width: 1"\n      material="shader: flat; src: ${thumb}"\n      sound="on: click; src: #click-sound"></a-entity>\n  <\/script>\n</a-assets>\n\n\x3c!-- ... --\x3e\n\n\x3c!-- Pass image sources to the template. --\x3e\n<a-entity template="src: #plane" data-thumb="#city-thumb"></a-entity>\n<a-entity template="src: #plane" data-thumb="#cubes-thumb"></a-entity>\n<a-entity template="src: #plane" data-thumb="#sechelt-thumb"></a-entity>\n')])])]),e("p",[t._v("模板组件允许我们不必重复很多HTML，使我们的场景非常可读。")]),t._v(" "),e("h3",{attrs:{id:"布局组件以布局链接"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#布局组件以布局链接"}},[t._v("#")]),t._v(" 布局组件以布局链接")]),t._v(" "),e("p",[t._v("因为实体的默认位置是0 0 0，所以实体将重叠。虽然我们可以手动定位每个链接，但我们可以使用布局组件来为自己定位。布局组件将自动将其子级定位到指定的布局。")]),t._v(" "),e("p",[t._v("我们在链接周围创建一个包装实体，并使用行布局附加布局组件：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<a-entity id="links" layout="type: line; margin: 1.5" position="-3 -1 -4">\n  <a-entity template="src: #plane" data-thumb="#city-thumb"></a-entity>\n  <a-entity template="src: #plane" data-thumb="#cubes-thumb"></a-entity>\n  <a-entity template="src: #plane" data-thumb="#sechelt-thumb"></a-entity>\n</a-entity>\n')])])]),e("p",[t._v("现在，我们的联系不再重叠，我们不必计算和摆弄位置。布局组件支持其他布局，包括网格、圆和十二面体。布局组件相当简单，但我们可以想象，在未来，它们可以变得越来越强大，同时保持同样的简单使用。")]),t._v(" "),e("h3",{attrs:{id:"悬停时视觉反馈的事件集组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#悬停时视觉反馈的事件集组件"}},[t._v("#")]),t._v(" 悬停时视觉反馈的事件集组件")]),t._v(" "),e("p",[t._v("最后，我们将添加一些视觉反馈到我们的链接。我们希望它们在悬停或单击时放大或缩小。这涉及到编写一个事件监听器来响应游标事件在scale组件上执行setAttributes。这是一个相当常见的模式，因此有一个事件集组件响应事件执行setAttribute。")]),t._v(" "),e("p",[t._v("让我们在链接上附加事件侦听器，以便在监视时将其放大，在单击时将其缩小，在不再监视时将其缩小。我们可以指定事件名称，可以是事件属性，也可以通过如下所示的id>来指定。其余的属性定义setAttribute调用。请注意，事件集组件可以有多个实例：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<script id="link" type="text/html">\n  <a-entity class="link"\n    geometry="primitive: plane; height: 1; width: 1"\n    material="shader: flat; src: ${thumb}"\n    sound="on: click; src: #click-sound"\n    event-set__mouseenter="scale: 1.2 1.2 1"\n    event-set__mouseleave="scale: 1 1 1"\n    event-set__click="_target: #image-360; _delay: 300; material.src: ${src}"></a-entity>\n<\/script>\n')])])]),e("p",[t._v("记住要将data src属性添加到链接实体，以便在单击时加载完整图像：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<a-entity template="src: #plane" data-src="#city" data-thumb="#city-thumb"></a-entity>\n<a-entity template="src: #plane" data-src="#cubes" data-thumb="#cubes-thumb"></a-entity>\n<a-entity template="src: #plane" data-src="#sechelt" data-thumb="#sechelt-thumb"></a-entity>\n\n')])])]),e("p",[t._v("接下来，我们要实际设置新的背景图像。我们将添加一个不错的淡入黑色效果。")]),t._v(" "),e("p",[t._v("上一次事件集单击更为复杂，因为它在另一个实体（我们的背景称为ID#image-360）上设置一个属性，延迟为300，并使用material.src设置纹理。延迟300将允许淡入黑色动画在设置纹理之前运行。")]),t._v(" "),e("h2",{attrs:{id:"更改背景的代理事件组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#更改背景的代理事件组件"}},[t._v("#")]),t._v(" 更改背景的代理事件组件")]),t._v(" "),e("p",[t._v("下一步，我们要连接到实际改变背景的点击链接。我们可以使用代理集将事件从一个实体传递到另一个实体。这是一种很方便的方式，可以告诉背景单击了其中一个链接以开始动画：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<a-entity\n  class="link"\n  \x3c!-- ... --\x3e\n  proxy-event="event: click; to: #image-360; as: fade">\n</a-entity>\n')])])]),e("p",[t._v("当点击链接时，它也会在我们的背景上发出事件（IDed as#image-360），将事件从点击重命名为淡入淡出。现在让我们处理此事件以开始动画：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('\x3c!-- 360-degree image. --\x3e\n<a-sky\n  id="image-360" radius="10" src="#city"\n  animation__fade="property: components.material.material.color; type: color; from: #FFF; to: #000; dur: 300; startEvents: fade"\n  animation__fadeback="property: components.material.material.color; type: color; from: #000; to: #FFF; dur: 300; startEvents: animationcomplete__fade"></a-sky>\n\n')])])]),e("p",[t._v("我们设置了两个动画，一个设置颜色淡入黑色，一个设置颜色淡入正常。动画“淡入淡出”设置为黑色，收听我们先前“代理”的淡入淡出事件。")]),t._v(" "),e("p",[t._v("动画淡入淡出的有趣之处在于，我们在动画淡出完成后，通过聆听动画完成时动画组件发出的animationcomplete淡出事件来启动它。我们有效地链接了这些动画！")]),t._v(" "),e("p",[t._v("通过使用组件，我们能够在几十行HTML中做很多事情，在大多数耳机和浏览器中使用虚拟现实技术。尽管生态系统有很多东西可以满足共同的需求，但非平凡的虚拟现实应用程序需要我们编写特定于应用程序的组件。这将在编写一个组件时介绍，并希望在以后的指南中介绍。")])])}),[],!1,null,null,null);a.default=n.exports}}]);