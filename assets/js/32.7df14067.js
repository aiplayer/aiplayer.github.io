(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{252:function(t,e,a){"use strict";a.r(e);var r=a(28),v=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"动画"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动画"}},[t._v("#")]),t._v(" 动画")]),t._v(" "),a("p",[t._v("动画组件使我们可以设置动画值和补间值，包括：")]),t._v(" "),a("ul",[a("li",[t._v("组件值（例如position，visible）")]),t._v(" "),a("li",[t._v("组件属性值（例如light.intensity）")])]),t._v(" "),a("p",[t._v("我们还可以直接补间值以实现更好的性能而不是通过来进行补间 .setAttribute，例如通过设置值动画：")]),t._v(" "),a("ul",[a("li",[t._v("在object3D（例如object3D.position.y，object3D.rotation.z）")]),t._v(" "),a("li",[t._v("直接在组件内（例如components.material.material.color，components.text.material.uniforms.opacity.value），")])]),t._v(" "),a("p",[t._v("例如，翻译一个盒子：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<a-box position="-1 1.6 -5" animation="property: position; to: 1 8 -10; dur: 2000; easing: linear; loop: true" color="tomato"></a-box>\n\n')])])]),a("p",[t._v("或以5米半径围绕一个球体运行：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<a-entity rotation="0 0 0" animation="property: rotation; to: 0 360 0; loop: true; dur: 10000">\n        <a-sphere position="5 0 0" color="mediumseagreen"></a-sphere>\n</a-entity>\n          \n')])])]),a("p",[t._v("请阅读下面的更多内容以获取其他选项，并了解如何正确设置不同类型的值的动画。")]),t._v(" "),a("h2",{attrs:{id:"api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#api"}},[t._v("#")]),t._v(" API")]),t._v(" "),a("h3",{attrs:{id:"特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特性"}},[t._v("#")]),t._v(" 特性")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("属性")]),t._v(" "),a("th",[t._v("描述")]),t._v(" "),a("th",[t._v("默认值")]),t._v(" "),a("th",[t._v("价值观")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("properties")]),t._v(" "),a("td",[t._v("要设置动画的属性。可以是组件名称，组件的点分隔属性（例如material.color）或纯属性。")]),t._v(" "),a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("isRawProperty")]),t._v(" "),a("td",[t._v("标记以为A-Frame组件外部的任意对象属性设置动画，以提高性能。例如，如果设置为true，我们可以设置property为like components.material.material.opacity。如果property以components或开头object3D，则将推断为true。")]),t._v(" "),a("td",[t._v("假")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("from")]),t._v(" "),a("td",[t._v("动画开始时的初始值。如果未指定，将使用实体的当前属性值（将在每个动画开始时采样）。from为了稳定起见，最好指定一个值。")]),t._v(" "),a("td",[t._v("空值")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("to")]),t._v(" "),a("td",[t._v("动画结束时的目标值。")]),t._v(" "),a("td",[t._v("空值")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("type")]),t._v(" "),a("td",[t._v("目前仅支持color补间isRawProperty颜色XYZ / RGB矢量值。")]),t._v(" "),a("td",[t._v("''")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("delay")]),t._v(" "),a("td",[t._v("开始之前要等待的时间（毫秒）。")]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("dir")]),t._v(" "),a("td",[t._v("其中DIR从去from到to。")]),t._v(" "),a("td",[t._v("正常")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("dur")]),t._v(" "),a("td",[t._v("动画的每个周期有多长时间（毫秒）。")]),t._v(" "),a("td",[t._v("1000")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("easing")]),t._v(" "),a("td",[t._v("动画的缓动功能。缓入，缓出，缓入和缓出。")]),t._v(" "),a("td",[t._v("easeInQuad")]),t._v(" "),a("td",[t._v("见宽松")])]),t._v(" "),a("tr",[a("td",[t._v("elasticity")]),t._v(" "),a("td",[t._v("反弹多少（越高越强）。")]),t._v(" "),a("td",[t._v("400")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("loop")]),t._v(" "),a("td",[t._v("动画应重复多少次。如果值为true，则动画将无限重复。")]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("round")]),t._v(" "),a("td",[t._v("是否舍入值。")]),t._v(" "),a("td",[t._v("假")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("startEvents")]),t._v(" "),a("td",[t._v("逗号分隔的事件列表，以侦听以触发重新启动并播放。如果指定，动画将不会自动播放。startEvents将重新启动动画，用于pauseEvents恢复它。如果实体上有其他动画组件为同一属性设置了动画，则这些动画将自动暂停以免发生冲突。")]),t._v(" "),a("td",[t._v("空值")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("pauseEvents")]),t._v(" "),a("td",[t._v("逗号分隔的事件列表，用于监听触发暂停。可以使用恢复resumeEvents。")]),t._v(" "),a("td",[t._v("空值")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("resumeEvents")]),t._v(" "),a("td",[t._v("暂停后，以逗号分隔的事件列表，用于监听触发恢复。")]),t._v(" "),a("td",[t._v("空值")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("autoplay")]),t._v(" "),a("td",[t._v("动画是否应该autoplay。如果为animation-timeline组件定义了动画，则应指定。")]),t._v(" "),a("td",[t._v("空值")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("enabled")]),t._v(" "),a("td",[t._v("如果禁用，动画将停止并且startEvents将不会触发动画开始。")]),t._v(" "),a("td",[t._v("真正")]),t._v(" "),a("td")])])]),t._v(" "),a("h2",{attrs:{id:"多种动画"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多种动画"}},[t._v("#")]),t._v(" 多种动画")]),t._v(" "),a("p",[t._v("组件的基本名称是animation。我们可以通过用双下划线（__）命名组件的空间来将多个动画附加到一个实体上：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<a-entity animation="property: rotation"\n          animation__2="property: position"\n          animation__color="property: material.color"></a-entity>\n\n')])])]),a("h2",{attrs:{id:"缓和"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓和"}},[t._v("#")]),t._v(" 缓和")]),t._v(" "),a("p",[t._v("缓动定义了整个动画周期的加速度和速度。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("|easeIn\t   |easeOut\t      |easeInOut\t   |其他|\n|----------|--------------|----------------|----|\n|easeInQuad|easeOutQuad\t  |easeInOutQuad   |线性的|\n|easeInCubic\t|easeOutCubic\t|easeInOutCubic ||\t\n|easeInQuart\t|easeOutQuart\t|easeInOutQuart ||\t\n|easeInQuint\t|easeOutQuint\t|easeInOutQuint ||\t\n|easeInSine\t|easeOutSine\t|easeInOutSine\t   ||\n|easeInExpo\t|easeOutExpo\t|easeInOutExpo\t   ||\n|easeInCirc\t|easeOutCirc\t|easeInOutCirc\t   ||\n|easeInBack\t|easeOutBack\t|easeInOutBack\t   ||\n|easyInElastic\t|easeOutElastic\teaseInOutElastic||\n")])])]),a("h2",{attrs:{id:"事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件"}},[t._v("#")]),t._v(" 事件")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("属性")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("animationbegin")]),t._v(" "),a("td",[t._v("动画开始了。事件详细信息包含name动画。")])]),t._v(" "),a("tr",[a("td",[t._v("animationcomplete")]),t._v(" "),a("td",[t._v("动画完成。事件详细信息包含name动画。")])]),t._v(" "),a("tr",[a("td",[t._v("animationcomplete__")]),t._v(" "),a("td",[t._v("如果动画具有ID（例如），则动画已完成animation__click。")])])])]),t._v(" "),a("h2",{attrs:{id:"会员"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#会员"}},[t._v("#")]),t._v(" 会员")]),t._v(" "),a("p",[t._v("以访问el.components.animation."),a("MEMBER",[t._v("。")])],1),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("会员")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("animation")]),t._v(" "),a("td",[t._v("anime.js对象。")])]),t._v(" "),a("tr",[a("td",[t._v("config")]),t._v(" "),a("td",[t._v("Config传递给anime.js。")])])])]),t._v(" "),a("h2",{attrs:{id:"对事件进行动画处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对事件进行动画处理"}},[t._v("#")]),t._v(" 对事件进行动画处理")]),t._v(" "),a("p",[t._v("我们可以使用该startEvents属性对事件进行动画处理：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<a-entity id="mouseCursor" cursor="rayOrigin: mouse"></a-entity>\n\n<a-entity\n  geometry="primitive: box"\n  material="color: red"\n  animation__mouseenter="property: components.material.material.color; type: color; to: blue; startEvents: mouseenter; dur: 500";\n  animation__mouseleave="property: components.material.material.color; type: color; to: red; startEvents: mouseleave; dur: 500";\n\n')])])]),a("h2",{attrs:{id:"重新混合-事件小故障动画-。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重新混合-事件小故障动画-。"}},[t._v("#")]),t._v(" 重新混合“事件小故障动画”。")]),t._v(" "),a("p",[t._v("动画化不同类型的值\n我们将研究为不同类型的值设置动画的不同情况。")]),t._v(" "),a("h3",{attrs:{id:"组件值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组件值"}},[t._v("#")]),t._v(" 组件值")]),t._v(" "),a("p",[t._v("我们可以激活一个特性部件值（例如，property: visible我们将在一个位布尔去了），或者使用点阵动画多特性部件的属性.作为分隔符（例如property: light.intensity， property: material.color）。")]),t._v(" "),a("p",[t._v("如果该属性是vec3，则也支持（例如property: someComponent.vec3Value; to: 5 5 5）。")]),t._v(" "),a("p",[t._v("但是，以这种方式对组件值进行动画处理并不是最佳方法，因为它将.setAttribute在动画的每个帧上调用。对于这里或那里的动画来说，没什么大不了的，但是我们可以通过直接设置值的动画来节省时间和内存。")]),t._v(" "),a("p",[t._v("一个特别注意事项，尽量不要为geometry组件的值设置动画，因为这将在每个刻度上重新创建几何图形。相反动画scale，如果我们想动画的大小。")]),t._v(" "),a("h3",{attrs:{id:"布尔值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#布尔值"}},[t._v("#")]),t._v(" 布尔值")]),t._v(" "),a("p",[t._v("我们可以“动画化”布尔值，该to值将在动画结束时应用。喜欢property: visible; from: false; to: true; dur: 1。")]),t._v(" "),a("h4",{attrs:{id:"通过object3d和直接值components"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通过object3d和直接值components"}},[t._v("#")]),t._v(" 通过object3D和直接值components")]),t._v(" "),a("p",[t._v("动画组件支持通过object3D 或直接设置动画值components。")]),t._v(" "),a("p",[t._v("例如，我们可以object3D像那样对值进行动画处理，这样property: object3D.position.z; to: 5将object3D.position.z 直接在实体的值之间进行补间，而无需调用.setAttribute; 这是最直接的方法，可让我们一次为单个轴设置动画。请注意，对于object3D.rotation，使用度数。")]),t._v(" "),a("p",[t._v("或者我们可以通过进入来为价值设置动画components。例如，我们可以直接使用来设置不透明度值的动画，而不是动画property: material.opacity显示.setAttribute在每个帧上调用哪个动画property: components.material.material.opacity。我们使用点分隔的路径来遍历对象树以查找要设置动画的值，并且引擎盖下的动画处理简化为更改数字。")]),t._v(" "),a("h4",{attrs:{id:"直接颜色值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#直接颜色值"}},[t._v("#")]),t._v(" 直接颜色值")]),t._v(" "),a("p",[t._v("我们可以直接为Three.js颜色值设置动画，但是我们需要指定type: color。因此，除了动画之外property: material.color，我们可以做 property: components.material.material.color; type: color。")]),t._v(" "),a("p",[t._v("关于颜色值的注释，我们可以使用十六进制，颜色名称，hsl或rgb（例如from: red; to: #FFCCAA或from: rgb(100, 100, 100); to: hsl(213, 100%, 70%)）指定颜色值。")]),t._v(" "),a("h2",{attrs:{id:"直接使用-anime-js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#直接使用-anime-js"}},[t._v("#")]),t._v(" 直接使用 anime.js")]),t._v(" "),a("p",[t._v("动漫是一种流行且功能强大的动画引擎。该组件只喜欢进行基本的补间，并触摸动漫可以做什么的表面（例如，时间轴，运动路径，进度，寻找）。如果我们需要更多的动画功能，请创建一个单独的组件，以直接调用anime.js。可通过访问动漫AFRAME.ANIME。")]),t._v(" "),a("p",[t._v("阅读并浏览"),a("a",{attrs:{href:"https://github.com/juliangarnier/anime",target:"_blank",rel:"noopener noreferrer"}},[t._v("anime.js"),a("OutboundLink")],1),t._v("文档和 "),a("a",{attrs:{href:"https://animejs.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("网站"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("p",[t._v("也可以看看\n"),a("a",{attrs:{href:"https://www.npmjs.com/package/aframe-animation-timeline-component",target:"_blank",rel:"noopener noreferrer"}},[t._v("动画时间轴组件"),a("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=v.exports}}]);