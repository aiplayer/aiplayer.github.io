(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{296:function(t,e,a){"use strict";a.r(e);var s=a(28),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"核心api-实体"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#核心api-实体"}},[t._v("#")]),t._v(" 核心API-实体")]),t._v(" "),a("p",[t._v("A-Frame通过"),a("A-entity",[t._v("元素表示一个实体。正如在实体组件系统模式中定义的那样，实体是占位符对象，我们插入组件为它们提供外观、行为和功能。")])],1),t._v(" "),a("p",[t._v("在A-Frame中，实体固有地与位置、旋转和缩放组件相连。")]),t._v(" "),a("h2",{attrs:{id:"例子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#例子"}},[t._v("#")]),t._v(" 例子")]),t._v(" "),a("p",[t._v("考虑下面的实体。它本身没有外观、行为或功能。它什么也不做：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<a-entity>\n")])])]),a("p",[t._v("我们可以将组件附加到它以使它呈现或执行某些操作。为了使其具有形状和外观，我们可以附加几何和材质组件：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<a-entity geometry="primitive: box" material="color: red">\n')])])]),a("p",[t._v("或者为了使其发光，我们可以进一步附加灯光组件：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<a-entity geometry="primitive: box" material="color: red"\n          light="type: point; intensity: 2.0">\n')])])]),a("h2",{attrs:{id:"检索实体"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#检索实体"}},[t._v("#")]),t._v(" 检索实体")]),t._v(" "),a("p",[t._v("我们可以使用domapi简单地检索实体。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<a-entity id=\"mario\"></a-entity>\n\nvar el = document.querySelector('#mario');\n")])])]),a("h2",{attrs:{id:"属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性"}},[t._v("#")]),t._v(" 属性")]),t._v(" "),a("h3",{attrs:{id:"组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组件"}},[t._v("#")]),t._v(" 组件")]),t._v(" "),a("a-entity",[t._v("。组件是附加到该实体的组件的对象。这使我们能够访问实体的组件，包括每个组件的数据、状态和方法。\n"),a("p",[t._v("例如，如果要获取实体的3.js相机对象或材质对象，可以访问其组件：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var camera = document.querySelector('a-entity[camera]').components.camera.camera;\nvar material = document.querySelector('a-entity[material]').components.material.material;\n\n")])])]),a("p",[t._v("或者，如果一个组件公开了一个API，我们可以调用它的方法：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("document.querySelector('a-entity[sound]').components.sound.pause();\n")])])]),a("h3",{attrs:{id:"hasloaded"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hasloaded"}},[t._v("#")]),t._v(" hasLoaded")]),t._v(" "),a("p",[t._v("实体是否已附加并初始化其所有组件。尽管确保代码在实体准备好之后运行的最佳方法是将代码放在组件中。")]),t._v(" "),a("h3",{attrs:{id:"isplaying"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#isplaying"}},[t._v("#")]),t._v(" isPlaying")]),t._v(" "),a("p",[t._v("实体是否处于活动状态并正在播放。如果我们暂停实体，那么isPlaying将变为false。")]),t._v(" "),a("h3",{attrs:{id:"object3d"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object3d"}},[t._v("#")]),t._v(" object3D")]),t._v(" "),a("a-entity",[t._v(".object3D是对实体的3.js object3D表示的引用。更具体地说，object3D是一个3.Group对象，可以包含不同类型的3.object3D，例如相机、网格、灯光或声音：\n"),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// Gaining access to the internal three.js scene graph.\nvar groupObject3D = document.querySelector('a-entity').object3D;\nconsole.log(groupObject3D.parent);\nconsole.log(groupObject3D.children);\n")])])]),a("p",[t._v("我们可以通过object3DMap访问不同类型的Object3Ds。")]),t._v(" "),a("h3",{attrs:{id:"object3dmap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object3dmap"}},[t._v("#")]),t._v(" object3DMap")]),t._v(" "),a("p",[t._v("实体的object3DMap是一个对象，它允许访问组件设置的不同类型的3.Object3Ds（例如相机、网格、灯光、声音）。")]),t._v(" "),a("p",[t._v("对于附着了几何图形和灯光组件的实体，object3DMap可能如下所示：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("{\n  light: <THREE.Light Object>,\n  mesh: <THREE.Mesh Object>\n}\n")])])]),a("p",[t._v("我们可以使用setObject3D和removeObject3D来管理实体的3.Object3Ds集。")]),t._v(" "),a("h3",{attrs:{id:"sceneel"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sceneel"}},[t._v("#")]),t._v(" sceneEl")]),t._v(" "),a("p",[t._v("实体具有对其场景元素的引用。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var sceneEl = document.querySelector('a-scene');\nvar entity = sceneEl.querySelector('a-entity');\nconsole.log(entity.sceneEl === sceneEl);  // >> true.\n")])])]),a("h2",{attrs:{id:"方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[t._v("#")]),t._v(" 方法")]),t._v(" "),a("h3",{attrs:{id:"addstate-statename"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#addstate-statename"}},[t._v("#")]),t._v(" addState(stateName)")]),t._v(" "),a("p",[t._v("addState将状态推送到实体上。这将发出stateadded事件，我们可以使用检查状态can是否存在。is:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("entity.addEventListener('stateadded', function (evt) {\n  if (evt.detail === 'selected') {\n    console.log('Entity now selected!');\n  }\n});\n\nentity.addState('selected');\nentity.is('selected');  // >> true\n")])])]),a("h3",{attrs:{id:"emit-name-detail-bubbles"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#emit-name-detail-bubbles"}},[t._v("#")]),t._v(" emit (name, detail, bubbles)")]),t._v(" "),a("p",[t._v("emit在实体上发出自定义DOM事件。例如，我们可以发出事件来触发动画：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// <a-entity animation=\"property: rotation; to: 0 360 0; startEvents: rotate\">\nentity.emit('rotate');\n")])])]),a("p",[t._v("我们还可以将事件详细信息或数据作为第二个参数传递：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("entity.emit('collide', { target: collidingEntity });\n")])])]),a("p",[t._v("默认情况下，事件将冒泡。我们可以通过冒充泡沫来告诉它不要泡沫：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("entity.emit('sink', null, false);\n")])])]),a("h3",{attrs:{id:"flushtodom-recursive"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flushtodom-recursive"}},[t._v("#")]),t._v(" flushToDOM (recursive)")]),t._v(" "),a("p",[t._v("flushToDOM将手动序列化实体组件的数据并更新DOM。阅读有关组件到DOM序列化的更多信息。")]),t._v(" "),a("h3",{attrs:{id:"getattribute-componentname"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#getattribute-componentname"}},[t._v("#")]),t._v(" getAttribute (componentName)")]),t._v(" "),a("p",[t._v("getAttribute 检索解析的组件数据（包括混合和默认值）。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// <a-entity geometry =“ primitive：box; width：3”>\n\nentity.getAttribute（'geometry'）; \n// >> {原始：“盒子”，深度：2，高度：2，宽度：3，...}\n\nentity.getAttribute（'geometry'）.primitive; \n// >>“盒子”\n\nentity.getAttribute（'geometry'）.height; \n// >> 2\n\nentity.getAttribute（'position'）; \n// >> {x：0，y：0，z：0}\n如果componentName不是注册组件的名称，getAttribute 则其行为将与通常情况相同：\n\n// <a-entity data-position =“ 0 1 1”>\n\nentity.getAttribute（'data-position'）; \n// >>“ 0 1 1”\n\n")])])]),a("h3",{attrs:{id:"getdomattribute-componentname"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#getdomattribute-componentname"}},[t._v("#")]),t._v(" getDOMAttribute (componentName)")]),t._v(" "),a("p",[t._v("getDOMAttribute仅检索在DOM中或通过明确定义的已解析组件数据setAttribute。如果componentName是已注册组件的名称，getDOMAttribute则将仅返回HTML中定义为解析对象的组件数据。getDOMAttribute对于组件来说，是部分形式，getAttribute因为返回的组件数据不包括应用的混合或默认值：")]),t._v(" "),a("p",[t._v("比较以上示例的输出getAttribute：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// <a-entity geometry =“ primitive：box; width：3”>\n\nentity.getDOMAttribute（'geometry'）; \n// >> {原语：“盒子”，宽度：3}\n\nentity.getDOMAttribute（'geometry'）.primitive; \n// >>“盒子”\n\nentity.getDOMAttribute（'geometry'）.height; \n// >>未定义\n\nentity.getDOMAttribute（'position'）; \n// >>未定义\n")])])]),a("h3",{attrs:{id:"getobject3d-type"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#getobject3d-type"}},[t._v("#")]),t._v(" getObject3D (type)")]),t._v(" "),a("p",[t._v("getObject3D查找孩子THREE.Object3D的引用type上object3DMap。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("AFRAME.registerComponent（'example-mesh'，{ \n  init：function（） { var el = this .el;     el.setObject3D（'mesh'，新的 THREE.Mesh（））;     el.getObject3D（'mesh'）;  //返回刚刚创建的THREE.Mesh。  } }）;\n    \n")])])]),a("h3",{attrs:{id:"pause"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pause"}},[t._v("#")]),t._v(" pause ()")]),t._v(" "),a("p",[t._v("pause()将停止动画和组件定义的任何动态行为。当我们暂停实体时，它将停止其动画并调用 Component.pause()其每个组件。这些组件决定实施暂停时发生的情况，这通常会删除事件侦听器。pause()当我们暂停实体时，该实体将调用其子实体。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// <a-entity id =“ spinning-jumping-ball”>\n entity.pause（）;\n")])])]),a("p",[t._v("例如，暂停时的外观控件组件将删除侦听输入的事件处理程序。")]),t._v(" "),a("h3",{attrs:{id:"play"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#play"}},[t._v("#")]),t._v(" play ()")]),t._v(" "),a("p",[t._v("play()将启动由动画和组件定义的任何动态行为。当DOM附加实体时，将自动调用此方法。当为实体时play()，该实体会调用play()其子实体。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("entity.pause（）; \nentity.play（）;\n")])])]),a("p",[t._v("例如，正在播放的声音组件将开始播放声音。")]),t._v(" "),a("h3",{attrs:{id:"setattribute-componentname-value-propertyvalue-clobber"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setattribute-componentname-value-propertyvalue-clobber"}},[t._v("#")]),t._v(" setAttribute (componentName, value, [propertyValue | clobber])")]),t._v(" "),a("p",[t._v("如果componentName不是注册组件的名称，或者该组件是单属性组件，则setAttribute其行为将与通常情况相同：")]),t._v(" "),a("p",[t._v("entity.setAttribute（'visible'，false）;\n尽管if componentName是已注册组件的名称，但它可能会对该值进行特殊解析。例如，位置组件是单属性组件，但是其属性类型解析器允许它获取一个对象：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("entity.setAttribute（'position'，{ x：1，y：2，z：3 }）;\ndestroy ()\n")])])]),a("p",[t._v("清理与实体相关的内存，例如清除所有组件及其数据。")]),t._v(" "),a("h2",{attrs:{id:"更新多属性组件数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更新多属性组件数据"}},[t._v("#")]),t._v(" 更新多属性组件数据")]),t._v(" "),a("p",[t._v("要更新多属性组件的组件数据，我们可以将注册组件的名称作为componentName传递，并将属性的对象作为传递value。字符串也是可以接受的（例如type: spot; distance: 30），但是对象将为A-Frame节省一些解析工作：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("//只有在对象中传递的属性将被覆盖。\nentity.setAttribute（'light'，{ \n  type：'spot'，\n  distance：30，\n  强度：2.0\n }）;\n")])])]),a("p",[t._v("或更新多属性组件的单个属性，我们可以将注册组件的componentName名称作为传递，将属性名称作为第二个参数传递，并将属性值设置为第三个参数：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("//材质组件的所有先前属性（颜色除外）将不受影响。\nentity.setAttribute（'material'，'color'，'crimson'）;\n")])])]),a("p",[t._v("请注意，数组属性类型的行为是唯一的：")]),t._v(" "),a("p",[t._v("数组是可变的。它们是通过引用分配的，因此对组件的更改将对组件可见。\n数组类型属性的更新不会触发组件的update方法，也不会发出事件。")]),t._v(" "),a("h2",{attrs:{id:"放置多属性组件数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#放置多属性组件数据"}},[t._v("#")]),t._v(" 放置多属性组件数据")]),t._v(" "),a("p",[t._v("如果true将用作第三个参数传递给.setAttribute，则未指定的属性将被重置并破坏：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("//灯光组件的所有先前属性将被删除并覆盖。\nentity.setAttribute（'light'，{ \n  类型：'spot'，\n  距离：30，\n  强度：2.0\n }，true）;\n")])])]),a("h3",{attrs:{id:"setobject3d-type-obj"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setobject3d-type-obj"}},[t._v("#")]),t._v(" setObject3D (type, obj)")]),t._v(" "),a("p",[t._v("setObject3D将注册过obj，一个THREE.Object3D作为type 下实体object3DMap。A-Frame添加obj为实体root的子代object3D。实体在调用时将发出object3dset带有type事件详细信息的事件setObject3D。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("AFRAME.registerComponent（'example-orthogonal-camera'，{ \n  update：function（） { 此 .el.setObject3D（'camera'，新的 THREE.OrthogonalCamera（））;   } }）;\n    \n")])])]),a("h3",{attrs:{id:"removeattribute-componentname-propertyname"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#removeattribute-componentname-propertyname"}},[t._v("#")]),t._v(" removeAttribute (componentName, propertyName)")]),t._v(" "),a("p",[t._v("如果componentName是已注册组件的名称，以及从DOM中删除该属性，removeAttribute也会从实体分离该组件，并调用组件的remove生命周期方法。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("entity.removeAttribute（'geometry'）;  //分离几何部件。\nentity.removeAttribute（'sound'）;  //分离声音组件。\n如果propertyName指定，removeAttribute则会将指定的那个属性的属性值重置propertyName为该属性的默认值：\n\nentity.setAttribute（'material'，'color'，'blue'）;  //颜色为蓝色。\nentity.removeAttribute（'material'，'color'）;  //将颜色重置为默认值白色。\n")])])]),a("h3",{attrs:{id:"removeobject3d-type"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#removeobject3d-type"}},[t._v("#")]),t._v(" removeObject3D (type)")]),t._v(" "),a("p",[t._v("removeObject3Dtype从实体的 对象中移除指定的对象THREE.Group，从而从场景中移除。这将更新实体的 object3DMap值，将type密钥的值设置为null。通常从组件中调用，通常在remove处理程序中：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("AFRAME.registerComponent（'example-light'，{ \n  update：function（） { this .el.setObject3D（'light'，new THREE.Light（））; //光线现在已成为场景的一部分。// object3DMap.light现在是THREE.Light（）对象。  }，\n    \n\n    \n\n\n  delete：function（） { this .el.removeObject3D（'light'）; //现在从场景中移除了灯光。// object3DMap.light现在为null。  } }）;\n    \n")])])]),a("h3",{attrs:{id:"removestate-statename"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#removestate-statename"}},[t._v("#")]),t._v(" removeState (stateName)")]),t._v(" "),a("p",[t._v("removeState将从实体弹出状态。这将发出 stateremoved事件，我们可以使用.is以下命令检查其删除状态：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("entity.addEventListener（'stateremoved'，function（evt） { if（evt.detail.state === 'selected'）{ console .log（'实体不再被选择。'）;   } }）;\n  \n    \n\n\n\nentity.addState（'selected'）; \nentity.is（'selected'）;  // >>是\n\nentity.removeState（'selected'）; \nentity.is（'selected'）;  // >>错误\n")])])]),a("h2",{attrs:{id:"事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件"}},[t._v("#")]),t._v(" 事件")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("活动名称")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("依附儿童")]),t._v(" "),a("td",[t._v("子实体已附加到该实体。")])]),t._v(" "),a("tr",[a("td",[t._v("儿童超脱")]),t._v(" "),a("td",[t._v("子实体已从该实体分离。")])]),t._v(" "),a("tr",[a("td",[t._v("组件已更改")]),t._v(" "),a("td",[t._v("实体的组件之一已被修改。此事件已被限制。不要使用它来读取位置和旋转变化，而应使用刻度线处理程序。")])]),t._v(" "),a("tr",[a("td",[t._v("组件初始化")]),t._v(" "),a("td",[t._v("实体的组件之一已初始化。")])]),t._v(" "),a("tr",[a("td",[t._v("组件已删除")]),t._v(" "),a("td",[t._v("实体的组件之一已被删除。")])]),t._v(" "),a("tr",[a("td",[t._v("已加载")]),t._v(" "),a("td",[t._v("实体已附加并初始化其组件。")])]),t._v(" "),a("tr",[a("td",[t._v("object3dset")]),t._v(" "),a("td",[t._v("THREE.Object3D是使用设置在实体上的setObject3D(name)。事件详细信息将包含name用于的设置object3DMap。")])]),t._v(" "),a("tr",[a("td",[t._v("暂停")]),t._v(" "),a("td",[t._v("现在，该实体处于非活动状态，并且根据动态行为已暂停。")])]),t._v(" "),a("tr",[a("td",[t._v("玩")]),t._v(" "),a("td",[t._v("该实体现在处于活动状态，并且在动态行为方面起作用。")])]),t._v(" "),a("tr",[a("td",[t._v("国家增补")]),t._v(" "),a("td",[t._v("实体收到新状态。")])]),t._v(" "),a("tr",[a("td",[t._v("状态已移除")]),t._v(" "),a("td",[t._v("实体不再具有特定状态。")])]),t._v(" "),a("tr",[a("td",[t._v("模式已更改")]),t._v(" "),a("td",[t._v("组件的架构已更改。")])])])]),t._v(" "),a("h3",{attrs:{id:"活动详情"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#活动详情"}},[t._v("#")]),t._v(" 活动详情")]),t._v(" "),a("p",[t._v("以下是每个事件的事件详细信息包含的内容：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("活动名称")]),t._v(" "),a("th",[t._v("属性")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("依附儿童")]),t._v(" "),a("td",[t._v("埃尔")]),t._v(" "),a("td",[t._v("引用附加的子元素。")])]),t._v(" "),a("tr",[a("td",[t._v("组件已更改")]),t._v(" "),a("td",[t._v("名称")]),t._v(" "),a("td",[t._v("修改了数据的组件名称。")])]),t._v(" "),a("tr",[a("td"),t._v(" "),a("td",[t._v("ID")]),t._v(" "),a("td",[t._v("已修改其数据的组件的ID。")])]),t._v(" "),a("tr",[a("td",[t._v("组件初始化")]),t._v(" "),a("td",[t._v("名称")]),t._v(" "),a("td",[t._v("初始化的组件的名称。")])]),t._v(" "),a("tr",[a("td"),t._v(" "),a("td",[t._v("ID")]),t._v(" "),a("td",[t._v("已修改其数据的组件的ID。")])]),t._v(" "),a("tr",[a("td"),t._v(" "),a("td",[t._v("数据")]),t._v(" "),a("td",[t._v("组件数据。")])]),t._v(" "),a("tr",[a("td",[t._v("组件已删除")]),t._v(" "),a("td",[t._v("名称")]),t._v(" "),a("td",[t._v("被删除的组件的名称。")])]),t._v(" "),a("tr",[a("td"),t._v(" "),a("td",[t._v("ID")]),t._v(" "),a("td",[t._v("被删除的组件的ID。")])]),t._v(" "),a("tr",[a("td",[t._v("国家增补")]),t._v(" "),a("td",[t._v("不适用")]),t._v(" "),a("td",[t._v("附加的状态（字符串）。")])]),t._v(" "),a("tr",[a("td",[t._v("状态已移除")]),t._v(" "),a("td",[t._v("不适用")]),t._v(" "),a("td",[t._v("分离的状态（字符串）。")])]),t._v(" "),a("tr",[a("td",[t._v("模式已更改")]),t._v(" "),a("td",[t._v("零件")]),t._v(" "),a("td",[t._v("更改其架构的组件的名称。")])])])]),t._v(" "),a("h3",{attrs:{id:"侦听组件更改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#侦听组件更改"}},[t._v("#")]),t._v(" 侦听组件更改")]),t._v(" "),a("p",[t._v("我们可以使用该componentchanged事件来监听对实体的更改：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("entity.addEventListener（'componentchanged'，function（evt） { if（evt.detail.name === 'position'）{ console .log（'实体已移至'，evt.target.getAttribute（'position'），'！'）;   } }）;\n")])])]),a("h3",{attrs:{id:"聆听附着和分离的子元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#聆听附着和分离的子元素"}},[t._v("#")]),t._v(" 聆听附着和分离的子元素")]),t._v(" "),a("p",[t._v("当场景附加或分离实体时，我们可以使用child-attached和child-detached事件来监听：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("entity.addEventListener（'child-attached'，function（evt） { 如果（evt.detail.el.tagName.toLowerCase（）=== 'a-box'）{ console .log（'已附加Box元素'）;   }; }）;\n  \n")])])])])],1)],1)}),[],!1,null,null,null);e.default=r.exports}}]);