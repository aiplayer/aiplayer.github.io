(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{404:function(e,t,a){"use strict";a.r(t);var s=a(28),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"使用threejs开发"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用threejs开发"}},[e._v("#")]),e._v(" 使用Threejs开发")]),e._v(" "),a("p",[e._v("作为一个基于three.js的框架，a-Frame提供了对three.js API的完全访问。我们将讨论如何访问底层的3.js场景、对象和位于A-Frame下面的API。")]),e._v(" "),a("h2",{attrs:{id:"a-frame与three-js场景图的关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#a-frame与three-js场景图的关系"}},[e._v("#")]),e._v(" A-Frame与Three.js场景图的关系")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("A-Frame的"),a("A-scene",[e._v("用一个three.js场景映射一对一。")])],1)]),e._v(" "),a("li",[a("p",[e._v("A-Frame的"),a("A-entity",[e._v("映射到一个或多个three.js对象。")])],1)]),e._v(" "),a("li",[a("p",[e._v("three.js的对象通过.el（由a-Frame设置）引用其a-Frame实体。")])])]),e._v(" "),a("h3",{attrs:{id:"父子关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#父子关系"}},[e._v("#")]),e._v(" 父子关系")]),e._v(" "),a("p",[e._v("当A-Frame实体嵌套在父子关系中时，它们的3.js对象也是如此。例如，以A帧场景为例：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("<a-scene>\n  <a-box>\n    <a-sphere></a-sphere>\n    <a-light></a-light>\n  </a-box>\n</a-scene>\n\n")])])]),a("p",[e._v("three.js场景图将对应如下：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("THREE.Scene\n  THREE.Mesh\n    THREE.Mesh\n    THREE.Light\n\n")])])]),a("h2",{attrs:{id:"访问three-js-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#访问three-js-api"}},[e._v("#")]),e._v(" 访问three.js API")]),e._v(" "),a("p",[e._v("three.js作为全局对象在窗口上可用：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("console.log(THREE);\n\n")])])]),a("h2",{attrs:{id:"使用three-js对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用three-js对象"}},[e._v("#")]),e._v(" 使用three.js对象")]),e._v(" "),a("p",[e._v("A-Frame是在three.js之上的一个抽象，但是我们仍然在three.js之下操作。A-Frame的元素有门指向three.js的场景图。")]),e._v(" "),a("h3",{attrs:{id:"访问three-js场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#访问three-js场景"}},[e._v("#")]),e._v(" 访问three.js场景")]),e._v(" "),a("p",[e._v("可以从"),a("a-scene",[e._v("元素as.object3D访问three.js场景：")])],1),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("document.querySelector('a-scene').object3D;  // THREE.Scene\n\n")])])]),a("p",[e._v("而且每个A-Frame实体也有一个指向via.sceneEl的引用：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("document.querySelector('a-entity').sceneEl.object3D;  // THREE.Scene\n\n")])])]),a("p",[e._v("从组件中，我们通过其实体（即this.el）访问场景：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("AFRAME.registerComponent('foo', {\n  init: function () {\n    var scene = this.el.sceneEl.object3D;  // THREE.Scene\n  }\n});\n")])])]),a("h3",{attrs:{id:"访问实体的3threejs对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#访问实体的3threejs对象"}},[e._v("#")]),e._v(" 访问实体的3threejs对象")]),e._v(" "),a("p",[e._v("每个A-Frame实体（例如，"),a("A-entity",[e._v("）都有自己的3.Object3D，更确切地说是一个包含不同类型Object3D的3.Group。实体的根3.Group通过.object3D访问：")])],1),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("document.querySelector('a-entity').object3D;  // THREE.Group\n\n")])])]),a("p",[e._v("实体可以由多种类型的Object3Ds组成。例如，一个实体既可以是3.Mesh，也可以是3.Light，方法是同时具有几何体组件和灯光组件：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("<a-entity geometry light></a-entity>\n\n")])])]),a("p",[e._v("组件将网格和灯光添加到实体的根3.Group下。对网格和灯光的引用作为不同类型的3.js对象存储在实体的.object3DMap中。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("console.log(entityEl.object3DMap);\n// {mesh: THREE.Mesh, light: THREE.Light}\n\n")])])]),a("p",[e._v("但我们可以通过实体的.getObject3D（name）方法访问它们：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("entityEl.getObject3D('mesh');  // THREE.Mesh\nentityEl.getObject3D('light');  // THREE.Light\n\n")])])]),a("p",[e._v("现在让我们看看这三个.js对象最初是如何设置的。")]),e._v(" "),a("h3",{attrs:{id:"在实体上设置object3d"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在实体上设置object3d"}},[e._v("#")]),e._v(" 在实体上设置Object3D")]),e._v(" "),a("p",[e._v("在实体上设置Object3D会将Object3D添加到实体的组中，从而使新设置的Object3D成为three.js场景的一部分。我们使用实体的.set Object3D（名称）方法设置Object3D，其中名称表示Object3D s的用途。")]),e._v(" "),a("p",[e._v("例如，要从组件中设置点光源，请执行以下操作：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("AFRAME.registerComponent('pointlight', {\n  init: function () {\n    this.el.setObject3D('light', new THREE.PointLight());\n  }\n});\n// <a-entity light></a-entity>\n\n")])])]),a("p",[e._v("我们用灯的名字来点灯。为了以后访问它，我们可以使用实体的.getObject3D（name）方法，如前所述：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("entityEl.getObject3D('light');\n\n")])])]),a("p",[e._v("当我们在a-Frame实体上设置一个three.js对象时，a-Frame将通过.el从three.js对象中设置对a-Frame实体的引用：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("entityEl.getObject3D('light').el;  // entityEl\n")])])]),a("p",[e._v("还有一个.getOrCreateObject3D（name，constructor）方法，用于创建和设置一个Object3D（如果没有用名称设置的话）。当几何体和材质组件都需要获取或创建网格时，这通常用于3.Mesh的情况。无论哪个组件先初始化创建网格，然后另一个组件获取网格。")]),e._v(" "),a("h3",{attrs:{id:"从实体中删除object3d"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#从实体中删除object3d"}},[e._v("#")]),e._v(" 从实体中删除Object3D")]),e._v(" "),a("p",[e._v("要从实体中移除Object3D，从而从three.js场景中移除Object3D，我们可以使用实体的.removeObject3D（name）方法。回到我们使用点光源的示例，我们在分离组件时移除光源：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("AFRAME.registerComponent('pointlight', {\n  init: function () {\n    this.el.setObject3D('light', new THREE.PointLight());\n  },\n\n  remove: function () {\n    // Remove Object3D.\n    this.el.removeObject3D('light');\n  }\n});\n\n")])])]),a("h2",{attrs:{id:"坐标空间之间的转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#坐标空间之间的转换"}},[e._v("#")]),e._v(" 坐标空间之间的转换")]),e._v(" "),a("p",[e._v("一般来说，每个物体和场景（世界）都有自己的坐标空间。父对象的位置、旋转和缩放变换将应用于其子对象的位置、旋转和缩放变换。想想这个场景：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<a-entity id="foo" position="1 2 3">\n  <a-entity id="bar" position="2 3 4"></a-entity>\n</a-entity>\n\n')])])]),a("p",[e._v("从世界的参考点来看，foo有位置（1,2,3），bar有位置（3,5,7），因为foo的变换应用于bar。从foo的参考点来看，foo有位置（0,0,0），bar有位置（2,3,4）。")]),e._v(" "),a("p",[e._v("通常我们需要在这些参考点和坐标空间之间进行转换。上面是一个简单的例子，但是我们可能需要做一些操作，比如查找条位置的世界空间坐标，或者将任意坐标转换为foo的坐标空间。在3D编程中，这些操作是用矩阵来完成的，但是three.js提供了帮助程序来简化这些操作。")]),e._v(" "),a("h3",{attrs:{id:"局部到世界转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#局部到世界转换"}},[e._v("#")]),e._v(" 局部到世界转换")]),e._v(" "),a("p",[e._v("通常，我们需要在父对象3DS上调用.updateMatrixWorld（），但3.js默认为Object3D.matrixAutoUpdate为true。我们可以使用三个.js的.getWorldPosition（vector）和.getworld四元数（quaternion）。")]),e._v(" "),a("p",[e._v("要获取Object3D的世界位置，请执行以下操作：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var worldPosition = new THREE.Vector3();\nentityEl.object3D.getWorldPosition(worldPosition);\n\n")])])]),a("p",[e._v("要获取Object3D的世界旋转：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var worldQuaternion = new THREE.Quaternion();\nentityEl.object3D.getWorldQuaternion(worldQuaternion);\n\n")])])]),a("p",[e._v("three.js Object3D有更多可用于本地到世界转换的功能：")]),e._v(" "),a("ul",[a("li",[e._v("localToWorld (vector)")]),e._v(" "),a("li",[e._v("getWorldDirection (vector)")]),e._v(" "),a("li",[e._v("getWorldQuaternion (quaternion)")]),e._v(" "),a("li",[e._v("getWorldScale (vector)")])]),e._v(" "),a("h3",{attrs:{id:"世界到地方的转变"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#世界到地方的转变"}},[e._v("#")]),e._v(" 世界到地方的转变")]),e._v(" "),a("p",[e._v("若要获取从世界到对象的局部空间的变换矩阵，请获取对象的世界矩阵的逆矩阵。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var worldToLocal = new THREE.Matrix4().getInverse(object3D.matrixWorld)\n\n")])])]),a("p",[e._v("然后，我们可以将世界局部矩阵应用到我们想要转换的任何东西：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("anotherObject3D.applyMatrix(worldToLocal);\n\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);