(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{304:function(t,e,a){"use strict";a.r(e);var s=a(28),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#工具"}},[t._v("#")]),t._v(" 工具")]),t._v(" "),a("p",[t._v("A-Frame的实用程序模块通过公开AFRAME.utils。")]),t._v(" "),a("h2",{attrs:{id:"aframe-utils-coordinates"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aframe-utils-coordinates"}},[t._v("#")]),t._v(" AFRAME.utils.coordinates")]),t._v(" "),a("p",[t._v("用于处理vec3和vec4类型的模块。")]),t._v(" "),a("h3",{attrs:{id:"iscoordinates-value"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iscoordinates-value"}},[t._v("#")]),t._v(" .isCoordinates (value)")]),t._v(" "),a("p",[t._v("测试字符串是vec3还是vec4。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("AFRAME.utils.coordinates.isCoordinates（'1 2 3'）\n// >>是\n\nAFRAME.utils.coordinates.isCoordinates（'1 2 3 4'）\n// >>是\n")])])]),a("h3",{attrs:{id:"parse-value"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parse-value"}},[t._v("#")]),t._v(" .parse (value)")]),t._v(" "),a("p",[t._v("将“ xyz”字符串解析为{x, y, z}vec3对象。或将“ xyzw”字符串解析为{x，y，z，w} vec4对象。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("AFRAME.utils.coordinates.parse（'1 2 -3'）\n// >> {x：1，y：2，z：-3}\n")])])]),a("h3",{attrs:{id:"stringify-data"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stringify-data"}},[t._v("#")]),t._v(" .stringify (data)")]),t._v(" "),a("p",[t._v("将{x, y, z}vec3对象字符串化为“ xyz”字符串。或将{x, y, z, w}vec4对象字符串化为“ xyzw”字符串。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("AFRAME.utils.coordinates.stringify（{ x：1，y：2，z：-3 }）\n// >>“ 1 2 -3”\n\nAFRAME.utils.coordinates.stringify（{ x：1，y：2，z：-3，w：4 }）\n// >>“ 1 2 -3 4”\n")])])]),a("h2",{attrs:{id:"aframe-utils-entity"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aframe-utils-entity"}},[t._v("#")]),t._v(" AFRAME.utils.entity")]),t._v(" "),a("h3",{attrs:{id:"getcomponentproperty-entity-componentname-delimiter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#getcomponentproperty-entity-componentname-delimiter"}},[t._v("#")]),t._v(" .getComponentProperty(entity, componentName, delimiter='.')")]),t._v(" "),a("p",[t._v("执行类似Entity.getAttribute，但支持返回多属性组件的单个属性。componentName 是一个字符串，可以是组件名称，也可以是用属性名称分隔的组件名称。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// <A-实体ID = “框”几何= “原语：框”> </一个实体> \n变种实体= 文档 .querySelector（'#box'）;\n\nAFRAME.utils.entity.getComponentProperty（entity，'geometry.primitive'）; \nAFRAME.utils.entity.getComponentProperty（entity，'geometry | primitive'，'|'）; \n// >>'盒子'\n\nAFRAME.utils.entity.getComponentProperty（entity，'geometry'）; \n// >> {原始：“盒子”，宽度：1，...}\n这对于需要一种方法来引用多属性组件的属性的组件很有用。\n")])])]),a("h3",{attrs:{id:"setcomponentproperty-entity-componentname-value-delimiter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setcomponentproperty-entity-componentname-value-delimiter"}},[t._v("#")]),t._v(" .setComponentProperty (entity, componentName, value, delimiter)")]),t._v(" "),a("p",[t._v("执行类似Entity.setAttribute，但支持为多属性组件设置单个属性。componentName是一个字符串，可以是组件名称，也可以是用属性名称分隔的组件名称。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// <A-实体ID = “框”几何= “原语：框”> </一个实体> \n变种实体= 文档 .querySelector（'#box'）;\n\nAFRAME.utils.entity.setComponentProperty（entity，'geometry.width'，1）; \nAFRAME.utils.entity.setComponentProperty（entity，'geometry | height'，2，'|'）; \nAFRAME.utils.entity.setComponentProperty（entity，'geometry'，{ depth：3 }）;\nAFRAME.utils.styleParser\n")])])]),a("h3",{attrs:{id:"parse-value-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parse-value-2"}},[t._v("#")]),t._v(" .parse (value)")]),t._v(" "),a("p",[t._v("将CSS样式的字符串解析为对象。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("AFRAME.utils.styleParser.parse（'attribute：color; dur：5000;'）\n// >> {“ attribute”：“ color”，“ dur”：“ 5000”}\n")])])]),a("h3",{attrs:{id:"stringify-data-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stringify-data-2"}},[t._v("#")]),t._v(" .stringify (data)")]),t._v(" "),a("p",[t._v("将对象字符串化为类似CSS样式的字符串。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("AFRAME.utils.styleParser.stringify（{ height：10，width：5 }）\n// >>“高度：10；宽度：5”\n")])])]),a("h2",{attrs:{id:"对象实用程序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象实用程序"}},[t._v("#")]),t._v(" 对象实用程序")]),t._v(" "),a("h3",{attrs:{id:"aframe-utils-deepequal-a-b"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aframe-utils-deepequal-a-b"}},[t._v("#")]),t._v(" AFRAME.utils.deepEqual (a, b)")]),t._v(" "),a("p",[t._v("检查两个对象（包括嵌套对象）是否具有相同的属性和值。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("deepEqual（{a：1，b：{c：3}}，{a：1，b：{c：3}}）\n// >>是\n")])])]),a("h3",{attrs:{id:"aframe-utils-diff-a-b"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aframe-utils-diff-a-b"}},[t._v("#")]),t._v(" AFRAME.utils.diff (a, b)")]),t._v(" "),a("p",[t._v("返回两个对象之间的差异。返回对象的键集表示哪些值不相等，而值集为b的值。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("diff（{ a：1，b：2，c：3 }，{ b：2，c：4 }）\n// >> {“ a”：未定义，“ c”：4}\n")])])]),a("h3",{attrs:{id:"aframe-utils-extend-target-source-source"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aframe-utils-extend-target-source-source"}},[t._v("#")]),t._v(" AFRAME.utils.extend(target, source, [source, ...])")]),t._v(" "),a("p",[t._v("对象分配polyfill")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("AFRAME.utils.extendDeep (target, source, [source, ...])\n深度分配\n")])])]),a("h2",{attrs:{id:"aframe-utils-device"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aframe-utils-device"}},[t._v("#")]),t._v(" AFRAME.utils.device")]),t._v(" "),a("h3",{attrs:{id:"aframe-utils-device-checkheadsetconnected"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aframe-utils-device-checkheadsetconnected"}},[t._v("#")]),t._v(" AFRAME.utils.device.checkHeadsetConnected ()")]),t._v(" "),a("p",[t._v("通过查找方向数据来检查是否已连接VR耳机。返回boolean。")]),t._v(" "),a("h3",{attrs:{id:"aframe-utils-device-isgearvr"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aframe-utils-device-isgearvr"}},[t._v("#")]),t._v(" AFRAME.utils.device.isGearVR ()")]),t._v(" "),a("p",[t._v("检查设备是否为Gear VR。返回boolean。")]),t._v(" "),a("h3",{attrs:{id:"aframe-utils-device-isoculusgo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aframe-utils-device-isoculusgo"}},[t._v("#")]),t._v(" AFRAME.utils.device.isOculusGo ()")]),t._v(" "),a("p",[t._v("检查设备是否为Oculus Go。返回boolean。")]),t._v(" "),a("h3",{attrs:{id:"aframe-utils-device-ismobile"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aframe-utils-device-ismobile"}},[t._v("#")]),t._v(" AFRAME.utils.device.isMobile ()")]),t._v(" "),a("p",[t._v("检查设备是否为智能手机。返回boolean。")]),t._v(" "),a("h2",{attrs:{id:"功能实用程序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#功能实用程序"}},[t._v("#")]),t._v(" 功能实用程序")]),t._v(" "),a("h3",{attrs:{id:"aframe-utils-throttle-function-minimuminterval-optionalcontext"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aframe-utils-throttle-function-minimuminterval-optionalcontext"}},[t._v("#")]),t._v(" AFRAME.utils.throttle (function, minimumInterval [, optionalContext])")]),t._v(" "),a("p",[t._v("返回一个限制的函数，该函数最多每minimumInterval毫秒调用一次 。this为了方便起见，可以提供诸如这样的上下文来处理功能绑定。和lodash的一样 throttle。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("AFRAME.registerComponent（'foo'，{ \n  init：function（） { //设置限制。this .throttledFunction = AFRAME.utils.throttle（this .everySecond，1000，this）;   }，\n    \n    \n\n\n  everySecond：函数（） { //每秒调用一次。console .log（“第二次过去。”）;   }，\n    \n    \n\n\n  tick：function（t，dt） { 此 .throttledFunction（）;  //每秒调用一次。console .log（“传递了一个框架。”）;  //调用每一帧。   }，}）;\n    \n    \n")])])]),a("h3",{attrs:{id:"aframe-utils-throttletick-function-t-dt-minimuminterval-optionalcontext"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aframe-utils-throttletick-function-t-dt-minimuminterval-optionalcontext"}},[t._v("#")]),t._v(" AFRAME.utils.throttleTick (function (t, dt) {...}, minimumInterval [, optionalContext])")]),t._v(" "),a("p",[t._v("返回一个限制的函数，该函数最多每minimumInterval毫秒调用一次 。this为了方便起见，可以提供诸如这样的上下文来处理功能绑定。")]),t._v(" "),a("p",[t._v("由于使用全局渲染循环传递的和时间戳，此变体的.throttle()性能略高一些，并且为tick处理程序量身定制 。tdt")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("AFRAME.registerComponent（'foo'，{ \n  init：function（） { //设置节拍限制。这个 .tick = AFRAME.utils.throttleTick（这个 .tick，500，这个）;   }，\n    \n    \n\n\n  / ** \n   *勾号功能将被包装以节制。\n   * /\n   tick：函数（t，dt） {} \n}）;\n")])])]),a("h2",{attrs:{id:"杂"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#杂"}},[t._v("#")]),t._v(" 杂")]),t._v(" "),a("h3",{attrs:{id:"aframe-utils-geturlparameter-name"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aframe-utils-geturlparameter-name"}},[t._v("#")]),t._v(" AFRAME.utils.getUrlParameter (name)")]),t._v(" "),a("p",[t._v("以字符串形式返回URL参数的值，否则返回空字符串。")]),t._v(" "),a("h3",{attrs:{id:"aframe-utils-geturlparameter（-testing-）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aframe-utils-geturlparameter（-testing-）"}},[t._v("#")]),t._v(" AFRAME.utils.getUrlParameter（'testing'）;")]),t._v(" "),a("p",[t._v("//如果使用？testing = aframe访问当前页面，则会记录为'aframe'。")])])}),[],!1,null,null,null);e.default=r.exports}}]);