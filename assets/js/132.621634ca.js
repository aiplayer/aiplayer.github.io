(window.webpackJsonp=window.webpackJsonp||[]).push([[132],{275:function(t,e,n){"use strict";n.r(e);var s=n(28),a=Object(s.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"光线投射"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#光线投射"}},[t._v("#")]),t._v(" 光线投射")]),t._v(" "),n("p",[t._v("从摄像机的角度来看，光线投射器（或光线拾取）用于与3D对象进行交互。光线投射器通过在摄像机视锥上跟随一条直线来检查沿途与3D网格的碰撞来实现这一点。")]),t._v(" "),n("p",[n("img",{attrs:{src:"/nunustudio/raycasting/raycasting.png",alt:"alt text"}})]),t._v(" "),n("p",[t._v("在nunuStudio中，默认情况下，每个场景都有一个光线投射器，该光线投射器使用第一个相机进行渲染。附着在场景上的光线投射器会使用鼠标坐标在每一帧进行更新。")]),t._v(" "),n("p",[t._v("下面的代码可用于测试raycaster对象，我们首先从程序中获取红色和蓝色材料。在更新方法上，我们使用raycaster intersectObjects方法检查鼠标是否在某个对象之上。")]),t._v(" "),n("p",[t._v("在获得相交对象的列表之后，我们循环遍历它们并根据当前按下的鼠标按钮更改其材质。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('var red, blue;\n\nfunction initialize()\n{\n\tred = program.getMaterialByName("red");\n\tblue = program.getMaterialByName("blue");\n}\n\nfunction update()\n{\n\t//Check interseted objects\n\tvar intersects = scene.raycaster.intersectObjects(scene.children);\n\t\n\t//Intersections list contains object, point of intersection, distance, uv and face\n\tfor(var i = 0; i < intersects.length; i++)\n\t{\n\t\tif(Mouse.buttonPressed(Mouse.LEFT))\n\t\t{\n\t\t\tintersects[i].object.material = red;\n\t\t}\n\t\telse if(Mouse.buttonPressed(Mouse.RIGHT))\n\t\t{\n\t\t\tintersects[i].object.material = blue;\n\t\t}\n\t}\n}\n')])])]),n("p",[t._v("intersectObjects方法返回一个相交对象列表，每个相交对象具有以下属性。要光线投射单个对象，也可以使用仅返回单个相交对象的intersectObject方法。")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("距离–射线原点和交点之间的距离")])]),t._v(" "),n("li",[n("p",[t._v("点–相交点，以世界坐标表示")])]),t._v(" "),n("li",[n("p",[t._v("脸–相交的脸")])]),t._v(" "),n("li",[n("p",[t._v("faceIndex –相交的脸部索引")])]),t._v(" "),n("li",[n("p",[t._v("索引–包含相交面的顶点索引")])]),t._v(" "),n("li",[n("p",[t._v("对象–相交的对象")])]),t._v(" "),n("li",[n("p",[t._v("uv-相交点的U，V坐标")])])]),t._v(" "),n("p",[t._v("交点按距离排序，在交点列表中的第一个对象始终是距离摄像机更近的对象。如果一切都按预期工作，则应该具有类似于演示波纹管的功能。使用鼠标左键将多维数据集绘制为蓝色，并使用鼠标右键将其绘制为红色。")]),t._v(" "),n("p",[t._v("要在编辑器中尝试此示例，可以下载项目文件或在Web编辑器上将其打开。")]),t._v(" "),n("p",[n("img",{attrs:{src:"/nunustudio/raycasting/run.png",alt:"alt text"}})]),t._v(" "),n("p",[t._v("使用raycaster的一种更简单的方法是在脚本中声明一个onMouseOver（intersects）方法。当鼠标悬停在该脚本的子级之一上时，将自动调用此方法。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function onMouseOver(intersects)\n{\n\tconsole.log(intersects);\n}\n")])])])])}),[],!1,null,null,null);e.default=a.exports}}]);